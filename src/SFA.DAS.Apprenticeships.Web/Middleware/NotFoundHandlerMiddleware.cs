using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics.CodeAnalysis;

namespace SFA.DAS.Apprenticeships.Web.Middleware
{
    [ExcludeFromCodeCoverage]
    public static class NotFoundHandlerMiddleware
    {
        public static async Task Ensure404ResponsesRedirectToErrorPage(HttpContext context, Func<Task> next)
        {
            if (context.Response.StatusCode == 404)
            {
                var originalPath = context.Request.Path.Value;
                context.Items["originalPath"] = originalPath;

                context.Request.Path = "/error/404";
                await next();

                if (!context.Items.ContainsKey("404ViewReturned"))
                {
                    // 404s that are generated by a controller returning a NotFound will have already been handled by the controller.
                    // In this case we need to explicitly call the error controller directly.
                    await InvokeController(context);
                }
            }
        }

        private static async Task InvokeController(HttpContext context)
        {
            var actionInvokerFactory = context.RequestServices.GetRequiredService<IActionInvokerFactory>();
            var actionDescriptorCollectionProvider = context.RequestServices.GetRequiredService<IActionDescriptorCollectionProvider>();

            var actionDescriptor = actionDescriptorCollectionProvider.ActionDescriptors.Items
                .First(ad => ad.RouteValues["Controller"] == "Error" && ad.RouteValues["Action"] == "Error");

            var routeData = new RouteData();
            routeData.Values["controller"] = "Error";
            routeData.Values["action"] = "Error";
            routeData.Values["statusCode"] = 404;

            var actionContext = new ActionContext(context, routeData, actionDescriptor);

            var invoker = actionInvokerFactory.CreateInvoker(actionContext);
            await invoker!.InvokeAsync();
        }
    }
}
